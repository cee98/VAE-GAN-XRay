class Decoder(nn.Module):

    """
    Decoder network for VAE.

    This class defines the architecture of the decoder network, which takes a sample
    from the latent space and produces a reconstructed image.

    Attributes:
        - fc1 (nn.Linear): Fully connected layer.
        - bn1 (nn.BatchNorm1d): Batch normalization for the fully connected layer.
        - relu (nn.LeakyReLU): Leaky ReLU activation function.
        - deconv1 (nn.ConvTranspose2d): First transposed convolutional layer.
        - bn2 (nn.BatchNorm2d): Batch normalization for the first deconvolutional layer.
        - deconv2 (nn.ConvTranspose2d): Second transposed convolutional layer.
        - bn3 (nn.BatchNorm2d): Batch normalization for the second deconvolutional layer.
        - deconv3 (nn.ConvTranspose2d): Third transposed convolutional layer.
        - tanh (nn.Tanh): Hyperbolic tangent activation function.

    Methods:
        - forward(x): Forward pass of the decoder network. Takes a latent space sample and
          produces a reconstructed image.

    """


    def __init__(self):
        super(Decoder, self).__init__()
        self.fc1 = nn.Linear(128, 256 * 16 * 16)
        self.bn1 = nn.BatchNorm1d(256 * 16 * 16, momentum=0.9)
        self.relu = nn.LeakyReLU(0.2)
        self.deconv1 = nn.ConvTranspose2d(256, 128, 5, stride=2, padding=2)
        self.bn2 = nn.BatchNorm2d(128, momentum=0.9)
        self.deconv2 = nn.ConvTranspose2d(128, 128, 5, stride=2, padding=2)
        self.bn3 = nn.BatchNorm2d(128, momentum=0.9)
        # self.deconv3 = nn.ConvTranspose2d(128, 1, 5, stride=2, padding=2)
        self.deconv3 = nn.ConvTranspose2d(128, 1, 5, stride=2, padding=2, output_padding=1)
        self.tanh = nn.Tanh()

    def forward(self, x):

        """
        Forward pass of the decoder network.

        Args:
            x (torch.Tensor): Input tensor - sample from the latent space.

        Returns:
            reconstructed_image (torch.Tensor): Reconstructed image.
        """


        batch_size = x.size()[0]
        x = self.relu(self.bn1(self.fc1(x)))
        x = x.view(-1, 256, 16, 16)
        x = self.relu(self.bn2(self.deconv1(x)))
        x = self.relu(self.bn3(self.deconv2(x)))
        x = self.tanh(self.deconv3(x))
        return x
